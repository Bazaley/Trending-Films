{"version":3,"file":"static/js/265.23b8b031.chunk.js","mappings":"uQAEaA,EAAOC,EAAAA,GAAAA,GAAH,+EAMJC,EAAYD,EAAAA,GAAAA,EAAH,wGACH,qBAAGE,KAAmB,OAAS,GAA/B,IACJ,qBAAGA,KAAmB,OAAS,MAA/B,IACE,qBAAGA,KAAmB,MAAQ,KAA9B,IAIJC,EAAQH,EAAAA,GAAAA,GAAH,wF,SCbLI,EAAa,SAAC,GAAyB,IAAvBC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QACnC,OACE,UAACP,EAAD,YACE,SAACI,EAAD,qRACA,UAACF,EAAD,CAAWC,MAAI,EAAf,qBAAyBG,MACzB,SAACJ,EAAD,UAAYK,MAGjB,ECRYC,EAAOP,EAAAA,GAAAA,GAAH,6CAIJC,EAAYD,EAAAA,GAAAA,EAAH,8FCHTQ,EAAa,SAAC,GAAiB,IAAfC,EAAc,EAAdA,QAC3B,OACE,SAACF,EAAD,UACGE,EAAQC,OACPD,EAAQE,KAAI,gBAAGN,EAAH,EAAGA,OAAQC,EAAX,EAAWA,QAASM,EAApB,EAAoBA,GAApB,OACV,SAACR,EAAD,CAAqBC,OAAQA,EAAQC,QAASA,GAA7BM,EADP,KAIZ,SAAC,EAAD,sKAIP,ECKD,EAfgB,WACd,OAA8BC,EAAAA,EAAAA,UAAS,MAAvC,eAAOJ,EAAP,KAAgBK,EAAhB,KACQC,GAAYC,EAAAA,EAAAA,MAAZD,QAWR,OATAE,EAAAA,EAAAA,YAAU,WACR,IAAMC,EAAK,mCAAG,uGAGFC,EAAAA,EAAAA,IAAkBJ,GAHhB,gBAEFK,EAFE,EAEVC,KAAQD,QAEVN,EAAWM,GAJC,2CAAH,qDAMXF,GACD,GAAE,CAACH,KACG,8BAAGN,IAAW,SAACD,EAAD,CAAYC,QAASA,KAC3C,C,kMCjBKa,EAAU,mCAChBC,EAAAA,EAAAA,SAAAA,QAAyB,gCAElB,IAAMC,EAAmB,mCAAG,WAAMC,GAAN,iFACpBF,EAAAA,EAAAA,IAAU,kCAAmC,CACxDG,OAAQ,CACNC,QAASL,EACTG,KAAAA,KAJ6B,mFAAH,sDASnBG,EAAc,mCAAG,WAAMb,GAAN,iFACfQ,EAAAA,EAAAA,IAAA,gBAAmBR,EAAnB,gBAA0C,CACrDW,OAAQ,CACNC,QAASL,EACTO,mBAAoB,YAJI,mFAAH,sDASdC,EAAS,mCAAG,WAAMf,GAAN,iFACVQ,EAAAA,EAAAA,IAAA,gBAAmBR,EAAnB,wBAAkD,CAC7DW,OAAQ,CACNC,QAASL,KAHU,mFAAH,sDAQTH,EAAiB,mCAAG,WAAMJ,GAAN,iFAClBQ,EAAAA,EAAAA,IAAA,gBAAmBR,EAAnB,YAAsC,CACjDW,OAAQ,CACNC,QAASL,KAHkB,mFAAH,sDAQjBS,EAAuB,mCAAG,WAAOC,EAAOP,GAAd,iFACxBF,EAAAA,EAAAA,IAAU,2BAA4B,CACjDG,OAAQ,CACNC,QAASL,EACTU,MAAAA,EACAP,KAAAA,KALiC,mFAAH,uD","sources":["components/ReviewItem/ReviewItem.styled.js","components/ReviewItem/ReviewItem.jsx","components/ReviewList/ReviewList.styled.js","components/ReviewList/ReviewList.jsx","pages/Reviews/Reviews.jsx","services/requestsForMovies.js"],"sourcesContent":["import styled from 'styled-components';\n\nexport const Item = styled.li`\n  &:not(:last-child) {\n    margin-bottom: 30px;\n  }\n`;\n\nexport const Paragraph = styled.p`\n  margin-bottom: ${({ head }) => (head ? '20px' : '0')};\n  font-size: ${({ head }) => (head ? '22px' : '18px')};\n  font-weight: ${({ head }) => (head ? '700' : '400')};\n  color: white;\n`;\n\nexport const Title = styled.h2`\n  margin-bottom: 20px;\n  color: white;\n  text-align: center;\n`;\n","import { Item, Title, Paragraph } from './ReviewItem.styled';\n\nexport const ReviewItem = ({ author, content }) => {\n  return (\n    <Item>\n      <Title>Извините, но у нас обзор только на английском языке</Title>\n      <Paragraph head>Author: {author}</Paragraph>\n      <Paragraph>{content}</Paragraph>\n    </Item>\n  );\n};\n","import styled from 'styled-components';\n\nexport const List = styled.ul`\n  margin-top: 30px;\n`;\n\nexport const Paragraph = styled.p`\n  color: white;\n  text-align: center;\n  text-transform: uppercase;\n`;\n","import { ReviewItem } from 'components/ReviewItem/ReviewItem';\nimport { List, Paragraph } from './ReviewList.styled';\n\nexport const ReviewList = ({ reviews }) => {\n  return (\n    <List>\n      {reviews.length ? (\n        reviews.map(({ author, content, id }) => (\n          <ReviewItem key={id} author={author} content={content} />\n        ))\n      ) : (\n        <Paragraph>У НАС НЕТ ОБЗОРА НА ЭТОТ ФИЛЬМ</Paragraph>\n      )}\n    </List>\n  );\n};\n","import { useState, useEffect } from 'react';\nimport { useParams } from 'react-router-dom';\nimport { fetchMovieReviews } from 'services/requestsForMovies';\nimport { ReviewList } from 'components/ReviewList/ReviewList';\n\nconst Reviews = () => {\n  const [reviews, setReviews] = useState(null);\n  const { movieId } = useParams();\n\n  useEffect(() => {\n    const fetch = async () => {\n      const {\n        data: { results },\n      } = await fetchMovieReviews(movieId);\n      setReviews(results);\n    };\n    fetch();\n  }, [movieId]);\n  return <>{reviews && <ReviewList reviews={reviews} />}</>;\n};\nexport default Reviews;\n","import axios from 'axios';\n\nconst API_KEY = '4f349eaa26ab680508bb40abbe6da2af';\naxios.defaults.baseURL = 'https://api.themoviedb.org/3/';\n\nexport const fetchTrendingMovies = async page => {\n  return await axios.get('/trending/movie/day?language=ru', {\n    params: {\n      api_key: API_KEY,\n      page,\n    },\n  });\n};\n\nexport const fetchMovieById = async movieId => {\n  return await axios.get(`movie/${movieId}?language=ru`, {\n    params: {\n      api_key: API_KEY,\n      append_to_response: 'videos',\n    },\n  });\n};\n\nexport const fetchCast = async movieId => {\n  return await axios.get(`movie/${movieId}/credits?language=ru`, {\n    params: {\n      api_key: API_KEY,\n    },\n  });\n};\n\nexport const fetchMovieReviews = async movieId => {\n  return await axios.get(`movie/${movieId}/reviews`, {\n    params: {\n      api_key: API_KEY,\n    },\n  });\n};\n\nexport const fetchMovieBySearchQuery = async (query, page) => {\n  return await axios.get('search/movie?language=ru', {\n    params: {\n      api_key: API_KEY,\n      query,\n      page,\n    },\n  });\n};\n"],"names":["Item","styled","Paragraph","head","Title","ReviewItem","author","content","List","ReviewList","reviews","length","map","id","useState","setReviews","movieId","useParams","useEffect","fetch","fetchMovieReviews","results","data","API_KEY","axios","fetchTrendingMovies","page","params","api_key","fetchMovieById","append_to_response","fetchCast","fetchMovieBySearchQuery","query"],"sourceRoot":""}