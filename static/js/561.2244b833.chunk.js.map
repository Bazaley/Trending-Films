{"version":3,"file":"static/js/561.2244b833.chunk.js","mappings":"sQAEaA,EAAOC,EAAAA,GAAAA,GAAH,8RAaJC,EAAOD,EAAAA,GAAAA,GAAH,yVAcJE,EAAiBF,EAAAA,GAAAA,IAAH,sDAIdG,EAAYH,EAAAA,GAAAA,EAAH,kKAWTI,EAAWJ,EAAAA,GAAAA,EAAH,sN,SCnCRK,EAAW,SAAC,GAAc,IAAZC,EAAW,EAAXA,KACzB,OACE,SAACP,EAAD,UACGO,GACCA,EAAKC,KAAI,SAAAC,GAAK,OACZ,UAACP,EAAD,WACGO,EAAMC,cACL,gBACEC,IAAG,UAVI,oCAUJ,OAAsBF,EAAMC,cAC/BE,IAAKH,EAAMI,QAGb,SAACR,EAAD,6DAGF,UAACF,EAAD,YACE,SAACC,EAAD,UAAYK,EAAMI,QAClB,UAACT,EAAD,gEAAsBK,EAAMK,kBAZrBL,EAAMM,GADL,KAmBrB,ECTD,EAlBa,WACX,OAAwBC,EAAAA,EAAAA,UAAS,MAAjC,eAAOT,EAAP,KAAaU,EAAb,KACQC,GAAYC,EAAAA,EAAAA,MAAZD,QAaR,OAXAE,EAAAA,EAAAA,YAAU,WACR,IACE,IAAMC,EAAK,mCAAG,uGACWC,EAAAA,EAAAA,GAAUJ,GADrB,gBACJK,EADI,EACJA,KACRN,EAAQM,EAAKhB,MAFD,2CAAH,qDAIXc,GAGD,CAFC,MAAOG,GACPC,QAAQC,IAAIF,EACb,CACF,GAAE,CAACN,KACG,SAACZ,EAAD,CAAUC,KAAMA,GACxB,C,kMCnBKoB,EAAU,mCAChBC,EAAAA,EAAAA,SAAAA,QAAyB,gCAElB,IAAMC,EAAmB,mCAAG,WAAMC,GAAN,iFACpBF,EAAAA,EAAAA,IAAU,kCAAmC,CACxDG,OAAQ,CACNC,QAASL,EACTG,KAAAA,KAJ6B,mFAAH,sDASnBG,EAAc,mCAAG,WAAMf,GAAN,iFACfU,EAAAA,EAAAA,IAAA,gBAAmBV,EAAnB,gBAA0C,CACrDa,OAAQ,CACNC,QAASL,EACTO,mBAAoB,YAJI,mFAAH,sDASdZ,EAAS,mCAAG,WAAMJ,GAAN,iFACVU,EAAAA,EAAAA,IAAA,gBAAmBV,EAAnB,wBAAkD,CAC7Da,OAAQ,CACNC,QAASL,KAHU,mFAAH,sDAQTQ,EAAiB,mCAAG,WAAMjB,GAAN,iFAClBU,EAAAA,EAAAA,IAAA,gBAAmBV,EAAnB,YAAsC,CACjDa,OAAQ,CACNC,QAASL,KAHkB,mFAAH,sDAQjBS,EAAuB,mCAAG,WAAOC,EAAOP,GAAd,iFACxBF,EAAAA,EAAAA,IAAU,2BAA4B,CACjDG,OAAQ,CACNC,QAASL,EACTU,MAAAA,EACAP,KAAAA,KALiC,mFAAH,uD","sources":["components/CastList/CastList.styled.js","components/CastList/CastList.jsx","pages/Cast/Cast.jsx","services/requestsForMovies.js"],"sourcesContent":["import styled from 'styled-components';\n\nexport const List = styled.ul`\n  display: grid;\n  max-width: calc(100vw - 48px);\n  grid-template-columns: repeat(auto-fill, minmax(200px, 1fr));\n  grid-gap: 16px;\n  margin-top: 20px;\n  margin-bottom: 20px;\n  padding: 0;\n  list-style: none;\n  margin-left: auto;\n  margin-right: auto;\n`;\n\nexport const Item = styled.li`\n  border-radius: 2px;\n  box-shadow: 0px 1px 3px 0px rgba(255, 255, 255, 0.2),\n    0px 1px 1px 0px rgba(255, 255, 255, 0.14),\n    0px 2px 1px -1px rgba(255, 255, 255, 0.12);\n  transition: transform 250ms cubic-bezier(0.4, 0, 0.2, 1);\n\n  &:hover,\n  &:focus {\n    transform: scale(1.03);\n    cursor: pointer;\n  }\n`;\n\nexport const DescriptionBox = styled.div`\n  padding: 20px 0 20px 10px;\n`;\n\nexport const Paragraph = styled.p`\n  text-align: center;\n  font-size: 15px;\n  font-weight: 500;\n  color: white;\n\n  &:not(:last-child) {\n    margin-bottom: 10px;\n  }\n`;\n\nexport const BoxPhoto = styled.p`\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  width: 100%;\n  color: white;\n  font-size: 20px;\n\n  @media screen and (min-width: 768px) {\n    height: 81%;\n  }\n`;\n","import {\n  List,\n  Item,\n  DescriptionBox,\n  Paragraph,\n  BoxPhoto,\n} from './CastList.styled';\nconst BASE_URL_IMAGE = 'https://image.tmdb.org/t/p/w500/';\n\nexport const CastList = ({ cast }) => {\n  return (\n    <List>\n      {cast &&\n        cast.map(actor => (\n          <Item key={actor.id}>\n            {actor.profile_path ? (\n              <img\n                src={`${BASE_URL_IMAGE}${actor.profile_path}`}\n                alt={actor.name}\n              />\n            ) : (\n              <BoxPhoto>'Нет фото'</BoxPhoto>\n            )}\n\n            <DescriptionBox>\n              <Paragraph>{actor.name}</Paragraph>\n              <Paragraph>Персонаж: {actor.character}</Paragraph>\n            </DescriptionBox>\n          </Item>\n        ))}\n    </List>\n  );\n};\n","import { useState, useEffect } from 'react';\nimport { useParams } from 'react-router-dom';\nimport { fetchCast } from 'services/requestsForMovies';\nimport { CastList } from 'components/CastList/CastList';\n\nconst Cast = () => {\n  const [cast, setCast] = useState(null);\n  const { movieId } = useParams();\n\n  useEffect(() => {\n    try {\n      const fetch = async () => {\n        const { data } = await fetchCast(movieId);\n        setCast(data.cast);\n      };\n      fetch();\n    } catch (error) {\n      console.log(error);\n    }\n  }, [movieId]);\n  return <CastList cast={cast} />;\n};\n\nexport default Cast;\n","import axios from 'axios';\n\nconst API_KEY = '4f349eaa26ab680508bb40abbe6da2af';\naxios.defaults.baseURL = 'https://api.themoviedb.org/3/';\n\nexport const fetchTrendingMovies = async page => {\n  return await axios.get('/trending/movie/day?language=ru', {\n    params: {\n      api_key: API_KEY,\n      page,\n    },\n  });\n};\n\nexport const fetchMovieById = async movieId => {\n  return await axios.get(`movie/${movieId}?language=ru`, {\n    params: {\n      api_key: API_KEY,\n      append_to_response: 'videos',\n    },\n  });\n};\n\nexport const fetchCast = async movieId => {\n  return await axios.get(`movie/${movieId}/credits?language=ru`, {\n    params: {\n      api_key: API_KEY,\n    },\n  });\n};\n\nexport const fetchMovieReviews = async movieId => {\n  return await axios.get(`movie/${movieId}/reviews`, {\n    params: {\n      api_key: API_KEY,\n    },\n  });\n};\n\nexport const fetchMovieBySearchQuery = async (query, page) => {\n  return await axios.get('search/movie?language=ru', {\n    params: {\n      api_key: API_KEY,\n      query,\n      page,\n    },\n  });\n};\n"],"names":["List","styled","Item","DescriptionBox","Paragraph","BoxPhoto","CastList","cast","map","actor","profile_path","src","alt","name","character","id","useState","setCast","movieId","useParams","useEffect","fetch","fetchCast","data","error","console","log","API_KEY","axios","fetchTrendingMovies","page","params","api_key","fetchMovieById","append_to_response","fetchMovieReviews","fetchMovieBySearchQuery","query"],"sourceRoot":""}